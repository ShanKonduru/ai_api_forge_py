"""
Base API client for {{ api_name }}
"""
import requests
from typing import Dict, Any, Optional, Union
from urllib.parse import urljoin
{% if include_auth %}
import base64
{% endif %}

from .exceptions import APIException, AuthenticationError, NotFoundError, ValidationError


class BaseClient:
    """Base API client with common functionality"""
    
    def __init__(self, base_url: str = "{{ base_uri }}", {% if include_auth %}api_key: Optional[str] = None, username: Optional[str] = None, password: Optional[str] = None{% endif %}):
        """
        Initialize the API client
        
        Args:
            base_url: Base URL for the API
            {% if include_auth %}api_key: API key for authentication
            username: Username for basic authentication
            password: Password for basic authentication{% endif %}
        """
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        {% if include_auth %}
        
        # Set up authentication
        if api_key:
            self.session.headers.update({'Authorization': f'Bearer {api_key}'})
        elif username and password:
            credentials = base64.b64encode(f'{username}:{password}'.encode()).decode()
            self.session.headers.update({'Authorization': f'Basic {credentials}'})
        {% endif %}
        
        # Set default headers
        self.session.headers.update({
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'User-Agent': '{{ api_name }}-python-client/{{ version }}'
        })
    
    def _make_request(
        self,
        method: str,
        endpoint: str,
        params: Optional[Dict[str, Any]] = None,
        data: Optional[Dict[str, Any]] = None,
        **kwargs
    ) -> requests.Response:
        """
        Make an HTTP request to the API
        
        Args:
            method: HTTP method (GET, POST, PUT, DELETE, etc.)
            endpoint: API endpoint path
            params: Query parameters
            data: Request body data
            **kwargs: Additional arguments for requests
            
        Returns:
            Response object
            
        Raises:
            APIException: For API errors
            AuthenticationError: For authentication errors
            NotFoundError: For 404 errors
            ValidationError: For validation errors
        """
        url = urljoin(self.base_url, endpoint.lstrip('/'))
        
        try:
            response = self.session.request(
                method=method,
                url=url,
                params=params,
                json=data,
                **kwargs
            )
            
            # Handle different HTTP status codes
            if response.status_code == 401:
                raise AuthenticationError("Authentication failed")
            elif response.status_code == 404:
                raise NotFoundError(f"Resource not found: {url}")
            elif response.status_code == 422:
                raise ValidationError(f"Validation error: {response.text}")
            elif not response.ok:
                raise APIException(f"API request failed: {response.status_code} - {response.text}")
            
            return response
            
        except requests.exceptions.RequestException as e:
            raise APIException(f"Request failed: {str(e)}")
    
    def get(self, endpoint: str, params: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """Make a GET request"""
        response = self._make_request('GET', endpoint, params=params, **kwargs)
        return response.json() if response.text else {}
    
    def post(self, endpoint: str, data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """Make a POST request"""
        response = self._make_request('POST', endpoint, data=data, **kwargs)
        return response.json() if response.text else {}
    
    def put(self, endpoint: str, data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """Make a PUT request"""
        response = self._make_request('PUT', endpoint, data=data, **kwargs)
        return response.json() if response.text else {}
    
    def patch(self, endpoint: str, data: Optional[Dict[str, Any]] = None, **kwargs) -> Dict[str, Any]:
        """Make a PATCH request"""
        response = self._make_request('PATCH', endpoint, data=data, **kwargs)
        return response.json() if response.text else {}
    
    def delete(self, endpoint: str, **kwargs) -> Dict[str, Any]:
        """Make a DELETE request"""
        response = self._make_request('DELETE', endpoint, **kwargs)
        return response.json() if response.text else {}
    
    def health_check(self) -> bool:
        """Check if the API is accessible"""
        try:
            response = self.session.get(urljoin(self.base_url, '/health'), timeout=5)
            return response.status_code == 200
        except:
            return False