"""
Test suite for {{ class_name }} API endpoints
"""
import pytest
import json
from app import create_app, db


@pytest.fixture
def app():
    """Create application for testing"""
    app = create_app('testing')
    with app.app_context():
        db.create_all()
        yield app
        db.session.remove()
        db.drop_all()


@pytest.fixture
def client(app):
    """Create test client"""
    return app.test_client()


@pytest.fixture
def sample_{{ resource_name }}():
    """Create sample {{ resource_name }} data"""
    return {
        "name": "Test {{ class_name }}",
        "description": "Test description"
    }


class Test{{ class_name }}API:
    """Test suite for {{ class_name }} API endpoints"""
    
    {% for endpoint in endpoints %}
    {% for method in endpoint.methods %}
    def test_{{ method.method.lower() }}{% if '{' in endpoint.uri %}_with_id{% endif %}(self, client, sample_{{ resource_name }}):
        """Test {{ method.method }} {{ endpoint.uri }}"""
        {% if method.method == 'POST' %}
        # Test creating a new {{ resource_name }}
        response = client.post(
            '{{ endpoint.uri }}',
            data=json.dumps(sample_{{ resource_name }}),
            content_type='application/json'
        )
        assert response.status_code == 201
        data = json.loads(response.data)
        assert 'id' in data
        {% elif method.method == 'GET' and '{' not in endpoint.uri %}
        # Test getting all {{ resource_name }}s
        response = client.get('{{ endpoint.uri }}')
        assert response.status_code == 200
        data = json.loads(response.data)
        assert isinstance(data, list)
        {% elif method.method == 'GET' and '{' in endpoint.uri %}
        # Create a {{ resource_name }} first
        post_response = client.post(
            '{{ endpoint.uri.split('/')[:-1] | join('/') }}',
            data=json.dumps(sample_{{ resource_name }}),
            content_type='application/json'
        )
        created_id = json.loads(post_response.data)['id']
        
        # Test getting specific {{ resource_name }}
        response = client.get(f'{{ endpoint.uri.replace('{', '').replace('}', '') }}'.replace('{{ endpoint.uri.split('/')[-1].replace('{', '').replace('}', '') }}', str(created_id)))
        assert response.status_code == 200
        data = json.loads(response.data)
        assert data['id'] == created_id
        {% elif method.method == 'PUT' %}
        # Create a {{ resource_name }} first
        post_response = client.post(
            '{{ endpoint.uri.split('/')[:-1] | join('/') }}',
            data=json.dumps(sample_{{ resource_name }}),
            content_type='application/json'
        )
        created_id = json.loads(post_response.data)['id']
        
        # Test updating the {{ resource_name }}
        updated_data = sample_{{ resource_name }}.copy()
        updated_data['name'] = 'Updated {{ class_name }}'
        
        response = client.put(
            f'{{ endpoint.uri.replace('{', '').replace('}', '') }}'.replace('{{ endpoint.uri.split('/')[-1].replace('{', '').replace('}', '') }}', str(created_id)),
            data=json.dumps(updated_data),
            content_type='application/json'
        )
        assert response.status_code == 200
        data = json.loads(response.data)
        assert data['name'] == 'Updated {{ class_name }}'
        {% elif method.method == 'DELETE' %}
        # Create a {{ resource_name }} first
        post_response = client.post(
            '{{ endpoint.uri.split('/')[:-1] | join('/') }}',
            data=json.dumps(sample_{{ resource_name }}),
            content_type='application/json'
        )
        created_id = json.loads(post_response.data)['id']
        
        # Test deleting the {{ resource_name }}
        response = client.delete(
            f'{{ endpoint.uri.replace('{', '').replace('}', '') }}'.replace('{{ endpoint.uri.split('/')[-1].replace('{', '').replace('}', '') }}', str(created_id))
        )
        assert response.status_code == 204
        
        # Verify deletion
        get_response = client.get(
            f'{{ endpoint.uri.replace('{', '').replace('}', '') }}'.replace('{{ endpoint.uri.split('/')[-1].replace('{', '').replace('}', '') }}', str(created_id))
        )
        assert get_response.status_code == 404
        {% endif %}
    
    {% endfor %}
    {% endfor %}
    
    def test_{{ resource_name }}_validation_errors(self, client):
        """Test validation error handling"""
        # Test with empty data
        response = client.post(
            '/api/{{ api_version }}/{{ resource_name }}',
            data=json.dumps({}),
            content_type='application/json'
        )
        assert response.status_code == 400
        
        # Test with invalid data
        response = client.post(
            '/api/{{ api_version }}/{{ resource_name }}',
            data='invalid json',
            content_type='application/json'
        )
        assert response.status_code == 400


def test_health_check(client):
    """Test application health check"""
    response = client.get('/health')
    assert response.status_code == 200 or response.status_code == 404  # 404 if route not implemented