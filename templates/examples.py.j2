"""
Usage examples for {{ api_name | title }} API client
"""
import os
from {{ api_name }} import {{ api_name | to_pascal_case }}Client


def main():
    """Main example function"""
    # Initialize the client
    {% if include_auth %}
    client = {{ api_name | to_pascal_case }}Client(
        base_url=os.getenv("API_BASE_URL", "https://api.example.com"),
        api_key=os.getenv("API_KEY", "your-api-key")
    )
    {% else %}
    client = {{ api_name | to_pascal_case }}Client(
        base_url=os.getenv("API_BASE_URL", "https://api.example.com")
    )
    {% endif %}
    
    print("üöÄ {{ api_name | title }} API Client Examples")
    print("=" * 40)
    
    # Health check
    if client.health_check():
        print("‚úÖ API is accessible")
    else:
        print("‚ùå API is not accessible")
        return
    
    {% for resource_name, resource_data in resources.items() %}
    print(f"\nüìÅ {{ resource_name | title }} Examples")
    print("-" * 20)
    
    try:
        {% for method in resource_data.methods %}
        {% if method.method == 'GET' and not '{' in resource_data.uri %}
        # List {{ resource_name }}s
        {{ resource_name }}_list = client.{{ resource_name }}.{{ method.method.lower() }}()
        print(f"üìã Found {len({{ resource_name }}_list)} {{ resource_name }}s")
        
        {% elif method.method == 'GET' and '{' in resource_data.uri %}
        # Get {{ resource_name }} by ID
        {{ resource_name }} = client.{{ resource_name }}.get_by_id({{ resource_data.path_params[0] }}=1)
        print(f"üìÑ Retrieved {{ resource_name }}: {{{ resource_name }}.get('name', 'N/A')}")
        
        {% elif method.method == 'POST' %}
        # Create new {{ resource_name }}
        new_{{ resource_name }}_data = {
            "name": "Example {{ resource_name | title }}",
            "description": "Created via API client example"
        }
        new_{{ resource_name }} = client.{{ resource_name }}.{{ method.method.lower() }}(data=new_{{ resource_name }}_data)
        print(f"‚ú® Created {{ resource_name }}: {new_{{ resource_name }}.get('id')}")
        
        {% elif method.method == 'PUT' and resource_data.path_params %}
        # Update {{ resource_name }}
        update_data = {
            "name": "Updated {{ resource_name | title }}",
            "description": "Updated via API client example"
        }
        updated_{{ resource_name }} = client.{{ resource_name }}.{{ method.method.lower() }}({{ resource_data.path_params[0] }}=1, data=update_data)
        print(f"üîÑ Updated {{ resource_name }}: {updated_{{ resource_name }}.get('name')}")
        
        {% elif method.method == 'DELETE' and resource_data.path_params %}
        # Delete {{ resource_name }} (commented out for safety)
        # client.{{ resource_name }}.{{ method.method.lower() }}({{ resource_data.path_params[0] }}=1)
        # print(f"üóëÔ∏è Deleted {{ resource_name }}")
        print("üóëÔ∏è Delete operation available (commented out for safety)")
        
        {% endif %}
        {% endfor %}
        
    except Exception as e:
        print(f"‚ùå Error with {{ resource_name }}: {e}")
    
    {% endfor %}


def error_handling_example():
    """Example of error handling"""
    {% if include_auth %}
    client = {{ api_name | to_pascal_case }}Client(
        base_url="https://api.example.com",
        api_key="invalid-key"
    )
    {% else %}
    client = {{ api_name | to_pascal_case }}Client(base_url="https://api.example.com")
    {% endif %}
    
    from {{ api_name }}.exceptions import APIException, AuthenticationError, NotFoundError
    
    try:
        # This will likely fail due to invalid credentials or non-existent resource
        {% if resources %}
        data = client.{{ resources.keys()|list|first }}.{% if any('{' in r.uri for r in resources.values()) %}get_by_id(999){% else %}list(){% endif %}
        {% endif %}
        
    except AuthenticationError:
        print("üîê Authentication failed - check your API key")
    except NotFoundError:
        print("üîç Resource not found")
    except APIException as e:
        print(f"üö® API error: {e}")
    except Exception as e:
        print(f"üí• Unexpected error: {e}")


{% if include_auth %}
def authentication_examples():
    """Examples of different authentication methods"""
    print("\nüîê Authentication Examples")
    print("-" * 25)
    
    # API Key authentication
    client_api_key = {{ api_name | to_pascal_case }}Client(
        base_url="https://api.example.com",
        api_key="your-api-key"
    )
    print("‚úÖ API Key authentication configured")
    
    # Basic authentication
    client_basic = {{ api_name | to_pascal_case }}Client(
        base_url="https://api.example.com",
        username="your-username",
        password="your-password"
    )
    print("‚úÖ Basic authentication configured")
{% endif %}


if __name__ == "__main__":
    main()
    print("\n" + "=" * 40)
    error_handling_example()
    {% if include_auth %}
    authentication_examples()
    {% endif %}